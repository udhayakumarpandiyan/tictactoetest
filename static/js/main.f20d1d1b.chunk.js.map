{"version":3,"sources":["store/types/index.js","route/history.js","store/reducers/language.js","store/reducers/authentication.js","store/reducers/product.js","store/reducers/billing.js","store/reducers/index.js","App.js","serviceWorker.js","index.js"],"names":["ON_LOAD","ON_ERROR","CHANGE_LANGUAGE","LOGIN","REGISTER","GET_ITEMS","ADD_ITEM","REMOVE_ITEM","SAVE_BILL","GET_BILLS","createBrowserHistory","initialState","language","loggedIn","added","removed","items","undefined","saved","bills","rootReducer","combineReducers","languageReducer","state","action","type","payload","authenticationReducer","registeredUser","productReducer","billingReducer","store","createStore","applyMiddleware","thunk","App","Shell","lazy","fallback","className","Boolean","window","location","hostname","match","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kGAAA,oVAAO,IAAMA,EAAU,UACVC,EAAW,WACXC,EAAkB,kBAClBC,EAAQ,QACRC,EAAU,WACVC,EAAW,YACXC,EAAU,WACVC,EAAc,cACdC,EAAY,YACZC,EAAY,a,gCCTzB,WAEeC,mB,swBCDf,IAAMC,EAAe,CACjBC,SAAU,M,+jBCAd,IAAMD,EAAe,CACjBE,UAAU,G,yjBCFd,IAAMF,EAAe,CACjBG,OAAO,EACPC,SAAS,EACTC,WAAOC,G,yjBCHX,IAAMN,EAAe,CACjBO,OAAO,EACPC,WAAOF,GCGX,IAIeG,EAJKC,YAAgB,CAChCC,gBJDW,WAAiD,IAA/BC,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC3D,OAAQA,EAAOC,MACX,KAAKvB,IACD,OAAO,EAAP,GACOqB,EADP,CAEIX,SAAUY,EAAOE,UAGzB,QACI,OAAO,EAAP,GACOH,KITEI,sBHDN,WAAuD,IAA/BJ,EAA8B,uDAAtBZ,EAAca,EAAQ,uCACjE,OAAQA,EAAOC,MACX,KAAKtB,IACD,OAAO,KACAoB,EADP,CAEIV,SAAUW,EAAOE,UAGzB,KAAKtB,IACD,OAAO,KACAmB,EADP,CAEIK,eAAgBJ,EAAOE,UAG/B,QACI,OAAO,KACAH,KGfyBM,eFA7B,WAAgD,IAA/BN,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC1D,OAAQA,EAAOC,MACX,KAAKpB,IACD,YACOkB,EADP,CAEIP,MAAOQ,EAAOE,UAEtB,KAAKpB,IACD,OAAO,KACAiB,EADP,CAEIT,MAAOU,EAAOE,UAGtB,KAAKnB,IACD,OAAO,KACAgB,EADP,CAEIR,QAASS,EAAOE,UAGxB,QACI,OAAO,KACAH,KErByCO,eDA7C,WAAgD,IAA/BP,EAA8B,uDAAtBZ,EAAca,EAAQ,uCAC1D,OAAQA,EAAOC,MACX,KAAKjB,IACD,OAAO,KACAe,EADP,CAEIL,MAAOM,EAAOE,UAEtB,KAAKjB,IACD,OAAO,KACAc,EADP,CAEIJ,MAAOK,EAAOE,UAItB,QACI,OAAO,KACAH,OEhBfQ,EAAQC,YAAYZ,EAAaa,YAAgBC,MAoBtCC,MAlBf,WAEE,IAAMC,EAAQC,gBAAK,kBAAM,uDACzB,OACE,kBAAC,WAAD,CACEC,SAAU,yBAAKC,UAAU,oBACvB,yBAAKA,UAAU,aAEjB,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAACK,EAAD,UCPUI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCVNC,IAASC,OACL,kBAAC,IAAD,CAAQC,QAASA,KACb,kBAAC,EAAD,OACOC,SAASC,eAAe,SDsHjC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f20d1d1b.chunk.js","sourcesContent":["export const ON_LOAD = \"ON_LOAD\";\nexport const ON_ERROR = \"ON_ERROR\";\nexport const CHANGE_LANGUAGE = \"CHANGE_LANGUAGE\";\nexport const LOGIN = \"LOGIN\";\nexport const REGISTER =\"REGISTER\";\nexport const GET_ITEMS =\"GET_ITEMS\";\nexport const ADD_ITEM =\"ADD_ITEM\";\nexport const REMOVE_ITEM = \"REMOVE_ITEM\";\nexport const SAVE_BILL = \"SAVE_BILL\";\nexport const GET_BILLS = \"GET_BILLS\";","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","import { CHANGE_LANGUAGE } from \"../types\";\nconst initialState = {\n    language: \"en\",\n    \n}\n\nexport default function language(state = initialState, action) {\n    switch (action.type) {\n        case CHANGE_LANGUAGE:\n            return {\n                ...state,\n                language: action.payload\n            };\n\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { LOGIN, REGISTER } from \"../types\";\nimport { REFUSED } from \"dns\";\nconst initialState = {\n    loggedIn: false\n}\n\nexport default function authentication(state = initialState, action) {\n    switch (action.type) {\n        case LOGIN:\n            return {\n                ...state,\n                loggedIn: action.payload\n            };\n\n        case REGISTER:\n            return {\n                ...state,\n                registeredUser: action.payload\n            };\n\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { ADD_ITEM , REMOVE_ITEM, GET_ITEMS} from \"../types\";\nconst initialState = {\n    added: false,\n    removed: false,\n    items: undefined,\n}\n\nexport default function product(state = initialState, action) {\n    switch (action.type) {\n        case GET_ITEMS:\n            return{\n                ...state,\n                items: action.payload\n            }\n        case ADD_ITEM:\n            return {\n                ...state,\n                added: action.payload\n            };\n\n        case REMOVE_ITEM:\n            return {\n                ...state,\n                removed: action.payload\n            };\n\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { SAVE_BILL, GET_BILLS } from \"../types\";\nconst initialState = {\n    saved: false,\n    bills: undefined\n\n}\n\nexport default function billing(state = initialState, action) {\n    switch (action.type) {\n        case SAVE_BILL:\n            return {\n                ...state,\n                saved: action.payload\n            }\n        case GET_BILLS:\n            return {\n                ...state,\n                bills: action.payload\n            }\n\n\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { combineReducers } from 'redux'\nimport languageReducer from './language';\nimport authenticationReducer from './authentication';\nimport productReducer from './product';\nimport billingReducer from './billing';\n\nconst rootReducer = combineReducers({\n    languageReducer, authenticationReducer, productReducer, billingReducer\n})\n\nexport default rootReducer;\n","import React, { lazy, Suspense } from 'react';\nimport './App.css';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport rootReducer from './store/reducers';\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nfunction App() {\n\n  const Shell = lazy(() => import('./shell/containers/Shell'));\n  return (\n    <Suspense\n      fallback={<div className=\"loader-container\" >\n        <div className=\"loader\" />\n      </div>}>\n      <div className=\"App\">\n        <Provider store={store}>\n          <Shell />\n        </Provider>\n\n      </div>\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport history from './route/history';\n\nReactDOM.render(\n    <Router history={history}>\n        <App />\n    </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}