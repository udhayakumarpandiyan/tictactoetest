{"version":3,"sources":["route/history.js","store/types/index.js","store/reducers/game.js","store/reducers/index.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["createBrowserHistory","ADD_PLAYERS","UPDATE_PLAYERS","initialState","players","index","name","wins","symbol","result","rootReducer","combineReducers","gameReducer","state","action","type","payload","middlewares","thunk","enhancers","compose","applyMiddleware","persistConfig","key","storage","stateReconciler","hardSet","blacklist","pReducer","persistReducer","store","createStore","persistor","persistStore","App","Shell","lazy","fallback","className","loading","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","history","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mHAAA,WAEeA,mB,gCCFf,oEAAO,IAAMC,EAAc,cACdC,EAAiB,kB,iyBCA9B,IAAMC,EAAe,CACjBC,QAAS,CAAC,CAAEC,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,OAAQ,IAAKC,OAAQ,MAC9D,CAAEJ,MAAO,EAAGC,KAAM,GAAIC,KAAM,EAAGC,OAAQ,IAAKC,OAAQ,QCAxD,IAIeC,EAJKC,YAAgB,CAChCC,YDEW,WAA6C,IAA/BC,EAA8B,uDAAtBV,EAAcW,EAAQ,uCACvD,OAAQA,EAAOC,MACX,KAAKd,IACD,YACOY,EADP,CAEIT,QAASU,EAAOE,UAExB,QACI,OAAO,EAAP,GACOH,O,gBERbI,EAAc,CAACC,KAEfC,EAAYC,YACdC,IAAe,WAAf,EAAmBJ,IAGjBK,EAAgB,CAClBC,IAAK,OACLC,YACAC,gBAAiBC,IAEjBC,UAAU,IAGRC,EAAWC,YAAeP,EAAeZ,GAElCoB,EAAQC,YACjBH,EAEAT,GAESa,EAAYC,YAAaH,GCJvBI,MAlBf,WAEE,IAAMC,EAAQC,gBAAK,kBAAM,uDACzB,OACE,kBAAC,WAAD,CACEC,SAAU,yBAAKC,UAAU,oBACvB,yBAAKA,UAAU,aAEjB,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAUR,MAAOA,GACf,kBAAC,IAAD,CAAaS,QAAS,KAAMP,UAAWA,GACrC,kBAACG,EAAD,WCLNK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfoC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,oBCxFjEC,IAASC,OACL,kBAAC,IAAD,CAAYC,QAASA,KACjB,kBAAC,EAAD,OACWC,SAASC,eAAe,SDWpC,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,iBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,iBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC2B,MAAM5B,GACHK,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BV,OAAOC,SAASyC,eAKpBtC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEArFAyB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.67ed3e7c.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory();","export const ADD_PLAYERS = \"ADD_PLAYERS\";\nexport const UPDATE_PLAYERS = \"UPDATE_PLAYERS\";\n","import { ADD_PLAYERS } from \"../types\";\nconst initialState = {\n    players: [{ index: 0, name: \"\", wins: 0, symbol: \"x\", result: null },\n    { index: 1, name: \"\", wins: 0, symbol: \"o\", result: null }]\n}\n\nexport default function game(state = initialState, action) {\n    switch (action.type) {\n        case ADD_PLAYERS:\n            return{\n                ...state,\n                players: action.payload\n            }\n        default:\n            return {\n                ...state\n            };\n    }\n};\n","import { combineReducers } from 'redux'\nimport gameReducer from './game';\n\nconst rootReducer = combineReducers({\n    gameReducer\n})\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { persistStore, persistReducer, persistCombineReducers } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport rootReducer from './reducers'; // the value from combineReducers\r\nimport thunk from 'redux-thunk';\r\nimport hardSet from 'redux-persist/es/stateReconciler/hardSet';\r\n\r\nconst middlewares = [thunk];\r\n\r\nconst enhancers = compose(\r\n    applyMiddleware(...middlewares)\r\n);\r\n\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage,\r\n    stateReconciler: hardSet, // see \"Merge Process\" section for details.\r\n    //blackList:[authenticate]\r\n    blacklist:[]         \r\n};\r\n\r\nconst pReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport const store = createStore(\r\n    pReducer,\r\n    // undefined, // {}, // initial state\r\n    enhancers\r\n);\r\nexport const persistor = persistStore(store);","import React, { lazy, Suspense } from 'react';\nimport './App.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport { persistor, store } from './store';\n\nfunction App() {\n\n  const Shell = lazy(() => import('./shell/containers/Shell'));\n  return (\n    <Suspense\n      fallback={<div className=\"loader-container\" >\n        <div className=\"loader\" />\n      </div>}>\n      <div className=\"App\">\n        <Provider store={store}>\n          <PersistGate loading={null} persistor={persistor}>\n            <Shell />\n          </PersistGate>\n        </Provider>\n      </div>\n    </Suspense>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter, Router } from 'react-router-dom';\nimport history from './route/history';\n\nReactDOM.render(\n    <HashRouter history={history}>\n        <App />\n    </HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}